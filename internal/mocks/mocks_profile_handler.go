// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	about "github.com/codigician/profile/internal/about"
	submission "github.com/codigician/profile/internal/submission"
	gomock "github.com/golang/mock/gomock"
)

// MockAboutService is a mock of AboutService interface.
type MockAboutService struct {
	ctrl     *gomock.Controller
	recorder *MockAboutServiceMockRecorder
}

// MockAboutServiceMockRecorder is the mock recorder for MockAboutService.
type MockAboutServiceMockRecorder struct {
	mock *MockAboutService
}

// NewMockAboutService creates a new mock instance.
func NewMockAboutService(ctrl *gomock.Controller) *MockAboutService {
	mock := &MockAboutService{ctrl: ctrl}
	mock.recorder = &MockAboutServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAboutService) EXPECT() *MockAboutServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAboutService) Create(ctx context.Context, personal about.Personal) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, personal)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAboutServiceMockRecorder) Create(ctx, personal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAboutService)(nil).Create), ctx, personal)
}

// Get mocks base method.
func (m *MockAboutService) Get(ctx context.Context, id string) (*about.About, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*about.About)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAboutServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAboutService)(nil).Get), ctx, id)
}

// MockSubmissionService is a mock of SubmissionService interface.
type MockSubmissionService struct {
	ctrl     *gomock.Controller
	recorder *MockSubmissionServiceMockRecorder
}

// MockSubmissionServiceMockRecorder is the mock recorder for MockSubmissionService.
type MockSubmissionServiceMockRecorder struct {
	mock *MockSubmissionService
}

// NewMockSubmissionService creates a new mock instance.
func NewMockSubmissionService(ctrl *gomock.Controller) *MockSubmissionService {
	mock := &MockSubmissionService{ctrl: ctrl}
	mock.recorder = &MockSubmissionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubmissionService) EXPECT() *MockSubmissionServiceMockRecorder {
	return m.recorder
}

// FindAllBetween mocks base method.
func (m *MockSubmissionService) FindAllBetween(ctx context.Context, start, end time.Time) ([]submission.Submission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBetween", ctx, start, end)
	ret0, _ := ret[0].([]submission.Submission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBetween indicates an expected call of FindAllBetween.
func (mr *MockSubmissionServiceMockRecorder) FindAllBetween(ctx, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBetween", reflect.TypeOf((*MockSubmissionService)(nil).FindAllBetween), ctx, start, end)
}

// MockAnalyticsService is a mock of AnalyticsService interface.
type MockAnalyticsService struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyticsServiceMockRecorder
}

// MockAnalyticsServiceMockRecorder is the mock recorder for MockAnalyticsService.
type MockAnalyticsServiceMockRecorder struct {
	mock *MockAnalyticsService
}

// NewMockAnalyticsService creates a new mock instance.
func NewMockAnalyticsService(ctrl *gomock.Controller) *MockAnalyticsService {
	mock := &MockAnalyticsService{ctrl: ctrl}
	mock.recorder = &MockAnalyticsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyticsService) EXPECT() *MockAnalyticsServiceMockRecorder {
	return m.recorder
}
